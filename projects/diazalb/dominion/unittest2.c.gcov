        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define TESTUNIT "updateCoins()"
        -:    9:
        -:   10:int failCount = 0;
        -:   11:
        6:   12:void testCheck(int a, int b) {
        6:   13:	if (a == b) {
        6:   14:		printf("PASSED\n");
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("FAILED\n");
    #####:   18:		failCount++;
        -:   19:	}
        6:   20:}
        -:   21:
        -:   22:
        1:   23:int main () {
        -:   24:    int i, b;
        -:   25:	int handCount;
        1:   26:    int numPlayers = 2;
        1:   27:    int seed = 1000;
        1:   28:    int bonus = 1;
        -:   29:
        -:   30:    int coppers[MAX_HAND];
        -:   31:    int silvers[MAX_HAND];
        -:   32:    int golds[MAX_HAND];
        -:   33:
        -:   34:	struct gameState G;
        -:   35:	
        -:   36:	// kingdom cards
        1:   37:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, 
        -:   38:				village, baron, great_hall};
        -:   39:				
        -:   40:    // arrays full of designated treasure
      501:   41:    for (i = 0; i < MAX_HAND; i++) {
      500:   42:        coppers[i] = copper;
      500:   43:        silvers[i] = silver;
      500:   44:        golds[i] = gold;
        -:   45:    }
        -:   46:
        1:   47:	printf("\n\n");
        1:   48:	printf("---------------- Unit Test 2 ----------------\n\n");
        -:   49:
        1:   50:	printf("-------------- Testing : %s ----------------\n", TESTUNIT);
        -:   51:
        -:   52:    
        3:   53:    for (handCount = 0; handCount <= 5; handCount = handCount + 5) {
        2:   54:        printf("\n\nTreasure cards: %d\n",handCount);
        2:   55:        printf("Bonus: %d\n", bonus);
        -:   56:
        2:   57:        memset(&G,23,sizeof(struct gameState));
        2:   58:        b = initializeGame(numPlayers, k, seed, &G);
        2:   59:        G.handCount[0] = handCount;
        -:   60:
        -:   61:		//TEST HAND WITH ALL GOLD
        2:   62:		printf("\nTEST HAND WITH ALL GOLD");
        2:   63:        memcpy(G.hand[0],golds,sizeof(int)*handCount);
        2:   64:        updateCoins(0,&G,bonus);
        2:   65:        testCheck(G.coins, handCount*3 + bonus);
        -:   66:		
        -:   67:        //TEST HAND WITH ALL SILVER
        2:   68:        printf("\nTEST HAND WITH ALL SILVER: ");
        2:   69:		memcpy(G.hand[0], silvers, sizeof(int)*handCount);
        2:   70:        updateCoins(0, &G, bonus);
        2:   71:        testCheck(G.coins,handCount*2 + bonus);
        -:   72:
        -:   73:        //TEST HAND WITH ALL COPPER
        2:   74:        printf("\nTEST HAND WITH ALL COPPER: ");
        2:   75:		memcpy(G.hand[0], coppers, sizeof(int)*handCount);
        2:   76:        updateCoins(0, &G, bonus);  
        2:   77:        testCheck(G.coins,handCount*1 + bonus);
        -:   78:
        2:   79:        bonus = bonus + 2;
        -:   80:    }
        -:   81:
        -:   82:	//DISPLAY TEST FINAL TEST RESULTS
        1:   83:	if (failCount) {
    #####:   84:		printf("\nTEST FAILED\n");
    #####:   85:		printf("Number of Fails: %d\n", failCount);
        -:   86:	}
        -:   87:	else {
        1:   88:		printf("\n100% COMPLETED TEST SUCCESSFULLY\n\n");
        -:   89:	}
        -:   90:
        1:   91:    return 0;
        -:   92:}
