        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define TESTCARD "adventurer"
        -:    9:
        -:   10:// global count of test failures
        -:   11:int failCount = 0;
        -:   12:
        -:   13:// function to check if two ints are equal or not
       17:   14:void testCheck(int a, int b) {
       17:   15:	if (a == b) {
       15:   16:		printf("PASSED\n");
        -:   17:	}
        -:   18:	else {
        2:   19:		printf("FAILED\n");
        2:   20:		failCount++;
        -:   21:	}
       17:   22:}
        -:   23:
        -:   24:
        1:   25:int main() {
        -:   26:	int i;
        1:   27:	int seed = 1000;
        1:   28:	int treasureAfter = 0, treasureBefore = 0;
        1:   29:	int numPlayers = 2;
        -:   30:	int card;
        1:   31:	int handpos = 0;
        1:   32:	int bonus = 0;
        -:   33:
        -:   34:	// kingdom cards
        1:   35:	int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, 
        -:   36:				smithy, village, baron, great_hall };
        -:   37:
        -:   38:	// game states
        -:   39:	struct gameState G, OG;
        -:   40:
        1:   41:	printf("\n\n");
        1:   42:	printf("---------------- Card Test 1 ----------------\n\n");
        -:   43:
        1:   44:	printf("-------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   45:	
        1:   46:	memset(&G, 23, sizeof(struct gameState));
        1:   47:	memset(&OG, 23, sizeof(struct gameState));
        -:   48:
        -:   49:	//create a new game
        1:   50:	initializeGame(numPlayers, k, seed, &G);
        -:   51:
        -:   52:	//Copy Initialized game state to 'OG'
        1:   53:	memcpy(&OG, &G, sizeof(struct gameState));
        -:   54:
        -:   55:	//Play Card
        1:   56:	cardEffect(TESTCARD, 0, 0, 0, &G, handpos, &bonus);
        -:   57:
        -:   58:	//TEST Hand Count: +2 Cards -1 Discard
        1:   59:	printf("\nTest Player 0 Hand gains +1 cards (+2 Treasure -1 Discard)\n");
        1:   60:	testCheck(G.handCount[0], OG.handCount[0] + 1);
        -:   61:
        -:   62:	// Checks Treasure Before
        6:   63:	for (i = 0; i < OG.handCount[0]; i++) {
        5:   64:		card = OG.hand[0][i];
        5:   65:		if (card == gold || card == silver || card == copper) {
        4:   66:			treasureBefore++;
        -:   67:		}
        -:   68:	}
        -:   69:	
        -:   70:	// Checks Treasure After
        6:   71:	for (i = 0; i < G.handCount[0]; i++) {
        5:   72:		card = G.hand[0][i];
        5:   73:		if (card == gold || card == silver || card == copper) {
        4:   74:			treasureAfter++;
        -:   75:		}
        -:   76:	}
        -:   77:
        -:   78:	//TEST TREASURE CARD +2
        1:   79:	printf("\nTEST Player 0 gains +2 treasure cards\n");
        1:   80:	testCheck(treasureBefore + 2, treasureAfter);
        -:   81:
        -:   82:	//TEST Other Player Hand & Deck
        1:   83:	printf("\nTEST: Check Player 1 status unchanged\n");
        1:   84:	printf("Hand Count: ");
        1:   85:	testCheck(G.handCount[1], OG.handCount[1]);
        -:   86:	
        1:   87:	printf("Deck Count: ");
        1:   88:	testCheck(G.deckCount[1], OG.deckCount[1]);
        -:   89:
        -:   90:	//TEST STATUS of Kingdom Cards
        1:   91:	printf("\nTEST: Check kingdom card status unchanged\n");
       11:   92:	for (i = 0; i < 10; i++) {
       10:   93:		printf("Kingdom Card %i: ", i);
       10:   94:		testCheck(G.supplyCount[k[i]], OG.supplyCount[k[i]]);
        -:   95:	}
        -:   96:
        -:   97:	//TEST STATUS OF Victory Cards
        1:   98:	printf("\nTEST: Check victory card status unchanged\n");
        1:   99:	printf("Province Pile: ");
        1:  100:	testCheck(G.supplyCount[province], OG.supplyCount[province]);
        -:  101:	
        1:  102:	printf("Duchy Pile: ");
        1:  103:	testCheck(G.supplyCount[duchy], OG.supplyCount[duchy]);
        -:  104:	
        1:  105:	printf("Estate Pile: ");
        1:  106:	testCheck(G.supplyCount[estate], OG.supplyCount[estate]);
        -:  107:
        -:  108:
        -:  109:	//DISPLAY TEST FINAL TEST RESULTS
        1:  110:	if (failCount) {
        1:  111:		printf("\nTEST FAILED\n");
        1:  112:		printf("Number of Fails: %d\n", failCount);
        -:  113:	}
        -:  114:	else {
    #####:  115:		printf("\n100% COMPLETED TEST SUCCESSFULLY\n\n");
        -:  116:	}
        -:  117:
        1:  118:	return 0;
        -:  119:}
