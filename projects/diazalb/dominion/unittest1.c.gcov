        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define TESTUNIT "gainCard()"
        -:    9:
        -:   10:int failCount = 0;
        -:   11:
        5:   12:void testCheck(int a, int b) {
        5:   13:	if (a == b) {
        5:   14:		printf("PASSED\n");
        -:   15:	}
        -:   16:	else {
    #####:   17:		printf("FAILED\n");
    #####:   18:		failCount++;
        -:   19:	}
        5:   20:}
        -:   21:
        -:   22:
        1:   23:int main () {
        -:   24:    int i, b;
        -:   25:	int handCount;
        1:   26:    int numPlayers = 2;
        1:   27:    int seed = 1000;
        1:   28:    int bonus = 1;
        -:   29:
        -:   30:	struct gameState G, OG;
        -:   31:	
        -:   32:	// kingdom cards
        1:   33:    int k[10] = {adventurer, council_room, feast, gardens, mine, remodel, smithy, 
        -:   34:				village, baron, great_hall};
        -:   35:			
        -:   36:
        1:   37:	printf("\n\n");
        1:   38:	printf("---------------- Unit Test 1 ----------------\n\n");
        -:   39:
        1:   40:	printf("-------------- Testing : %s ----------------\n", TESTUNIT);
        -:   41:
        1:   42:    memset(&G,23,sizeof(struct gameState));
        1:   43:    initializeGame(numPlayers, k, seed, &G);
        -:   44:	
        -:   45:	//Copy Initialized game state to 'OG'
        1:   46:	memcpy(&OG, &G, sizeof(struct gameState));
        -:   47:
        1:   48:	printf("\nGold supply pile is empty\n");
        1:   49:    G.supplyCount[gold] = 0;
        1:   50:    testCheck(gainCard(gold,&G,0,0),-1);
        1:   51:    G.supplyCount[gold] = 30;
        1:   52:	OG.supplyCount[gold] = G.supplyCount[gold];
        -:   53:	
        1:   54:    printf("\nTEST add +1 card to deck: ");
        1:   55:    gainCard(gold,&G,1,0);
        1:   56:    testCheck(G.deckCount[0],OG.deckCount[0] + 1);
        -:   57:
        1:   58:    printf("\nTEST add +1 card to hand: ");
        1:   59:    gainCard(gold,&G,2,0);
        1:   60:    testCheck(OG.handCount[0] + 1,G.handCount[0]);
        -:   61:
        1:   62:    printf("\nTEST add +1 card to discard pile: ");
        1:   63:    gainCard(gold,&G,0,0);
        1:   64:    testCheck(OG.discardCount[0] + 1,G.discardCount[0]);
        -:   65:
        1:   66:    printf("\nTEST -1 decrease in gold supply: ");
        1:   67:    gainCard(gold,&G,0,0);
        1:   68:    testCheck(OG.supplyCount[gold] - 4,G.supplyCount[gold]);
        -:   69:
        -:   70:	//DISPLAY TEST FINAL TEST RESULTS
        1:   71:	if (failCount) {
    #####:   72:		printf("\nTEST FAILED\n");
    #####:   73:		printf("Number of Fails: %d\n", failCount);
        -:   74:	}
        -:   75:	else {
        1:   76:		printf("\n100% COMPLETED TEST SUCCESSFULLY\n\n");
        -:   77:	}
        -:   78:
        1:   79:    return 0;
        -:   80:}
