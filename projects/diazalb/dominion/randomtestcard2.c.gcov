        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include <time.h>
        -:    4:#include <string.h>
        -:    5:#include "dominion.h"
        -:    6:#include "dominion_helpers.h"
        -:    7:#include "rngs.h"
        -:    8:
        -:    9:#define tests 10000
        -:   10:#define criteria 3
        -:   11:#define MAX_PLAYERS 4
        -:   12:#define TESTCARD "smithy"
        -:   13:
        -:   14:int failed = 0;
        -:   15:
        -:   16:// function to check if two ints are equal or not
    20000:   17:void testCheck(int a, int b) {
    20000:   18:	if (a == b) {
    #####:   19:		printf("PASSED\n");
        -:   20:	}
        -:   21:	else {
    20000:   22:		printf("FAILED\n");
    20000:   23:		failed++;
        -:   24:	}
    20000:   25:}
        -:   26:
        1:   27:int main()
        -:   28:{
        1:   29:    srand(time(NULL));
        -:   30:	int i;
        -:   31:
        1:   32:	printf("\n\n");
        1:   33:	printf("---------------- Random Card Test 2 ----------------\n\n");
        -:   34:
        1:   35:	printf("-------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   36:	
    10001:   37:    for(i = 0; i < tests; i++)
        -:   38:	{
        -:   39:
        -:   40:        struct gameState afterTest;
        -:   41:		
    10000:   42:        int k[10] = {adventurer, gardens, embargo, village, steward, 
        -:   43:					mine, cutpurse, sea_hag, tribute, smithy};
        -:   44:
        -:   45:		//establish game settings into afterTest
    10000:   46:        initializeGame(MAX_PLAYERS, k, rand(), &afterTest);
        -:   47:
    10000:   48:        int player = rand() % 4;
    10000:   49:        afterTest.whoseTurn = player;
        -:   50:        
    10000:   51:        int choice1 = rand() % 50;
    10000:   52:        int choice2 = rand() % 50;
    10000:   53:        int choice3 = rand() % 50;
    10000:   54:        int handPos = rand() % MAX_HAND;
    10000:   55:		int bonus = rand() % 50;
        -:   56:		
        -:   57:		//create a copy of the initialized game before using cardEffect
        -:   58:        struct gameState beforeTest;
    10000:   59:        memcpy(&beforeTest, &afterTest, sizeof(struct gameState));
        -:   60:
        -:   61:		//use the adventurer card
    10000:   62:        cardEffect(TESTCARD, choice1, choice2, choice3, &afterTest, handPos, &bonus);
        -:   63:
        -:   64:	//TEST Deck goes down by -3 Cards
    10000:   65:	printf("\nPlayer 0 Deck Count: -3 Cards Drawn\n");
    10000:   66:	testCheck(afterTest.deckCount[0], beforeTest.deckCount[0] - 3);
        -:   67:	
        -:   68:	//TEST Hand goes up by +2 Cards
    10000:   69:	printf("\nPlayer 0 Hand Count: +2 cards (Draw 3, Discard 1)\n");
    10000:   70:	testCheck(afterTest.handCount[0], beforeTest.handCount[0] + 2);
        -:   71:    
        -:   72:	}
        -:   73:
        1:   74:    printf("Test Success Rate: %d of %d\n", tests * criteria - failed, tests * criteria);
        1:   75:}
