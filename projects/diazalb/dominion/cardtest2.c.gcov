        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include <string.h>
        -:    4:#include <stdio.h>
        -:    5:#include <assert.h>
        -:    6:#include "rngs.h"
        -:    7:
        -:    8:#define TESTCARD "smithy"
        -:    9:
        -:   10:int failCount = 0;
        -:   11:
        -:   12:// function to check if two ints are equal or not
       17:   13:void testCheck(int a, int b) {
       17:   14:	if (a == b) {
       15:   15:		printf("PASSED\n");
        -:   16:	}
        -:   17:	else {
        2:   18:		printf("FAILED\n");
        2:   19:		failCount++;
        -:   20:	}
       17:   21:}
        -:   22:
        -:   23:
        1:   24:int main() {
        -:   25:	int i;
        1:   26:	int seed = 1000;
        1:   27:	int treasureAfter = 0, treasureBefore = 0;
        1:   28:	int numPlayers = 2;
        -:   29:	int card;
        1:   30:	int handpos = 0;
        1:   31:	int bonus = 0;
        -:   32:
        -:   33:	// kingdom cards
        1:   34:	int k[10] = { adventurer, council_room, feast, gardens, mine, remodel, 
        -:   35:				smithy, village, baron, great_hall };
        -:   36:
        -:   37:	// game states
        -:   38:	struct gameState G, OG;
        -:   39:
        1:   40:	printf("\n\n");
        1:   41:	printf("---------------- Card Test 2 ----------------\n\n");
        -:   42:
        1:   43:	printf("-------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   44:	
        1:   45:	memset(&G, 23, sizeof(struct gameState));
        1:   46:	memset(&OG, 23, sizeof(struct gameState));
        -:   47:
        -:   48:	//create a new game
        1:   49:	initializeGame(numPlayers, k, seed, &G);
        -:   50:
        -:   51:	//Copy Initialized game state to 'OG'
        1:   52:	memcpy(&OG, &G, sizeof(struct gameState));
        -:   53:
        -:   54:	//Play Card
        1:   55:	cardEffect(TESTCARD, 0, 0, 0, &G, handpos, &bonus);
        -:   56:
        -:   57:	//TEST Deck goes down by -3 Cards
        1:   58:	printf("\nPlayer 0 Deck Count: -3 Cards Drawn\n");
        1:   59:	testCheck(G.deckCount[0], OG.deckCount[0] - 3);
        -:   60:	
        -:   61:	//TEST Hand goes up by +2 Cards
        1:   62:	printf("\nPlayer 0 Hand Count: +2 cards (Draw 3, Discard 1)\n");
        1:   63:	testCheck(G.handCount[0], OG.handCount[0] + 2);
        -:   64:
        -:   65:
        -:   66:	//TEST Other Player Hand & Deck
        1:   67:	printf("\nTEST: Check Player 1 status unchanged\n");
        1:   68:	printf("Hand Count: ");
        1:   69:	testCheck(G.handCount[1], OG.handCount[1]);
        -:   70:	
        1:   71:	printf("Deck Count: ");
        1:   72:	testCheck(G.deckCount[1], OG.deckCount[1]);
        -:   73:
        -:   74:	//TEST STATUS of Kingdom Cards
        1:   75:	printf("\nTEST: Check kingdom card status unchanged\n");
       11:   76:	for (i = 0; i < 10; i++) {
       10:   77:		printf("Kingdom Card %i: ", i);
       10:   78:		testCheck(G.supplyCount[k[i]], OG.supplyCount[k[i]]);
        -:   79:	}
        -:   80:
        -:   81:	//TEST STATUS OF Victory Cards
        1:   82:	printf("\nTEST: Check victory card status unchanged\n");
        1:   83:	printf("Province Pile: ");
        1:   84:	testCheck(G.supplyCount[province], OG.supplyCount[province]);
        -:   85:	
        1:   86:	printf("Duchy Pile: ");
        1:   87:	testCheck(G.supplyCount[duchy], OG.supplyCount[duchy]);
        -:   88:	
        1:   89:	printf("Estate Pile: ");
        1:   90:	testCheck(G.supplyCount[estate], OG.supplyCount[estate]);
        -:   91:
        -:   92:
        -:   93:	//DISPLAY TEST FINAL TEST RESULTS
        1:   94:	if (failCount) {
        1:   95:		printf("\nTEST FAILED\n");
        1:   96:		printf("Number of Fails: %d\n", failCount);
        -:   97:	}
        -:   98:	else {
    #####:   99:		printf("\n100% COMPLETED TEST SUCCESSFULLY\n\n");
        -:  100:	}
        -:  101:
        1:  102:	return 0;
        -:  103:}
